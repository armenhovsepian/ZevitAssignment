// <auto-generated />
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ContactContext))]
    partial class ContactContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ApplicationCore.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Contact", b =>
                {
                    b.OwnsOne("ApplicationCore.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<int>("ContactId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<string>("City")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(90)
                                .HasColumnType("nvarchar(90)")
                                .HasDefaultValue("")
                                .HasColumnName("Country");

                            b1.Property<string>("State")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)")
                                .HasDefaultValue("")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(180)
                                .HasColumnType("nvarchar(180)")
                                .HasDefaultValue("")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(18)
                                .HasColumnType("nvarchar(18)")
                                .HasDefaultValue("")
                                .HasColumnName("ZipCode");

                            b1.HasKey("ContactId");

                            b1.ToTable("Contacts");

                            b1.WithOwner()
                                .HasForeignKey("ContactId");
                        });

                    b.OwnsOne("ApplicationCore.Entities.EmailAddress", "EmailAddress", b1 =>
                        {
                            b1.Property<int>("ContactId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("EmailAddress");

                            b1.HasKey("ContactId");

                            b1.ToTable("Contacts");

                            b1.WithOwner()
                                .HasForeignKey("ContactId");
                        });

                    b.OwnsOne("ApplicationCore.Entities.FullName", "FullName", b1 =>
                        {
                            b1.Property<int>("ContactId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("LastName");

                            b1.HasKey("ContactId");

                            b1.ToTable("Contacts");

                            b1.WithOwner()
                                .HasForeignKey("ContactId");
                        });

                    b.OwnsOne("ApplicationCore.Entities.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<int>("ContactId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("ContactId");

                            b1.ToTable("Contacts");

                            b1.WithOwner()
                                .HasForeignKey("ContactId");
                        });

                    b.Navigation("Address");

                    b.Navigation("EmailAddress");

                    b.Navigation("FullName");

                    b.Navigation("PhoneNumber");
                });
#pragma warning restore 612, 618
        }
    }
}
